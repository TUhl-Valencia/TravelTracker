import org.junit.jupiter.api.*;
import java.io.File;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/*
 * Name: Todd Uhl
 * Course: 202610 Software Development I CEN-3024C-14877
 * Date: 1031/2025
 *
 * Class: TripServiceTest
 * Purpose: This JUnit test class verifies all CRUD operations and custom actions
 * of the Travel Tracker Database Management System. Tests simulate typical user
 * behavior including adding, deleting, updating, sorting, and file operations.
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class TripServiceTest {
    private static TripService tripService;
    private static final String TEST_DB = "test_trips.db";

    @BeforeAll
    static void setupDatabase() throws SQLException {
        File dbFile = new File(TEST_DB);
        if (dbFile.exists()) dbFile.delete();
        tripService = new TripService(TEST_DB);
    }

    @Test
    @Order(1)
    @DisplayName("Test Creating a Trip")
    void testCreateTrip() throws SQLException {
        Trip trip = tripService.createTrip(
                "Paris",
                LocalDate.of(2025, 1, 1),
                LocalDate.of(2025, 1, 10),
                1500.00,
                "Eiffel Tower visit"
        );
        assertNotNull(trip);
        assertEquals("Paris", trip.getDestination());
    }

    @Test
    @Order(2)
    @DisplayName("Test Getting All Trips")
    void testGetAllTrips() throws SQLException {
        List<Trip> trips = tripService.getAllTrips();
        assertFalse(trips.isEmpty(), "Trip list should not be empty after insertion");
    }

    @Test
    @Order(3)
    @DisplayName("Test Updating a Trip")
    void testUpdateTrip() throws SQLException {
        Trip trip = tripService.getAllTrips().get(0);
        trip.setDestination("London");
        tripService.updateTrip(trip);
        Trip updated = tripService.getAllTrips().get(0);
        assertEquals("London", updated.getDestination(), "Destination should be updated to London");
    }

    @Test
    @Order(4)
    @DisplayName("Test Deleting a Trip")
    void testDeleteTrip() throws SQLException {
        Trip trip = tripService.createTrip(
                "Tokyo",
                LocalDate.of(2025, 2, 1),
                LocalDate.of(2025, 2, 8),
                2000.00,
                "Shibuya visit"
        );
        tripService.deleteTrip(trip.getId());
        boolean stillExists = tripService.getAllTrips().stream()
                .anyMatch(t -> t.getId() == trip.getId());
        assertFalse(stillExists, "Trip should be deleted from database");
    }

    @Test
    @Order(5)
    @DisplayName("Test Exporting Database File")
    void testExportToFile() throws Exception {
        String exportPath = "export_test.db";
        File exportFile = new File(exportPath);
        if (exportFile.exists()) exportFile.delete();

        // Just confirm TripService can access dbPath without error
        String dbPath = tripService.getDbPath();
        assertTrue(new File(dbPath).exists(), "Database should exist before export");

        // Simulate export (copy database file)
        try (var in = new java.io.FileInputStream(dbPath);
             var out = new java.io.FileOutputStream(exportFile)) {
            in.transferTo(out);
        }

        assertTrue(exportFile.exists(), "Exported DB file should exist after copy");
    }

    @AfterAll
    static void cleanup() {
        File dbFile = new File(TEST_DB);
        if (dbFile.exists()) dbFile.delete();
        File exportFile = new File("export_test.db");
        if (exportFile.exists()) exportFile.delete();
    }
}
