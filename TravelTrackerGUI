import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
/*
 * Name: Todd Uhl
 * Course: 202610 Software Development I CEN-3024C-14877
 * Date: 10/31/2025
 *
 * Class: TravelTrackerGUI
 * Demo-ready, polished GUI with logo, colors, hover effects,
 * table styling, and search bar for Travel Tracker Phase 4.
 */
public class TravelTrackerGUI extends Application {
    private TripService tripService;
    private final ObservableList<Trip> tripList = FXCollections.observableArrayList();
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private TableView<Trip> table;

    @Override
    public void start(Stage stage) throws Exception {
        stage.setTitle("Travel Tracker DMS");

        //Ask user to choose or create a database
        Alert dbChoice = new Alert(Alert.AlertType.CONFIRMATION);
        dbChoice.setTitle("Database Setup");
        dbChoice.setHeaderText("Would you like to create a new database or open an existing one?");
        ButtonType createNew = new ButtonType("Create New");
        ButtonType openExisting = new ButtonType("Open Existing");
        dbChoice.getButtonTypes().setAll(createNew, openExisting);

        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().add(new ExtensionFilter("SQLite Database (*.db)", "*.db"));
        fileChooser.setTitle("Select or Create Database File");

        String dbPath = null;
        ButtonType result = dbChoice.showAndWait().orElse(openExisting);

        if (result == createNew) {
            File file = fileChooser.showSaveDialog(stage);
            if (file != null) dbPath = file.getAbsolutePath();
        } else {
            File file = fileChooser.showOpenDialog(stage);
            if (file != null) dbPath = file.getAbsolutePath();
        }

        if (dbPath == null) {
            showAlert("Error", "No database selected. Exiting application.");
            return;
        }

        tripService = new TripService(dbPath);

        //Header
        Image globeImage = new Image(getClass().getResourceAsStream("/globe.png"));
        ImageView globeView = new ImageView(globeImage);
        globeView.setFitHeight(150);
        globeView.setPreserveRatio(true);

        Label header = new Label("Travel Tracker");
        header.setFont(new Font("Segoe UI", 48));
        header.setStyle("-fx-text-fill: #ffffff; -fx-font-weight: bold;");

        VBox headerBox = new VBox(10, globeView, header);
        headerBox.setAlignment(Pos.CENTER);
        headerBox.setPadding(new Insets(20));
        headerBox.setStyle("-fx-background-color: #4682b4; -fx-border-radius: 5;");

        //Table
        table = new TableView<>();
        TableColumn<Trip, Integer> idCol = new TableColumn<>("ID");
        idCol.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(c.getValue().getId()));

        TableColumn<Trip, String> destCol = new TableColumn<>("Destination");
        destCol.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(c.getValue().getDestination()));

        TableColumn<Trip, String> dateCol = new TableColumn<>("Dates");
        dateCol.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(
                c.getValue().getStartDate().format(formatter) + " - " + c.getValue().getEndDate().format(formatter)
        ));

        TableColumn<Trip, Double> budgetCol = new TableColumn<>("Budget ($)");
        budgetCol.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(c.getValue().getBudget()));

        TableColumn<Trip, String> statusCol = new TableColumn<>("Status");
        statusCol.setCellValueFactory(c -> new javafx.beans.property.SimpleStringProperty(
                c.getValue().isCompleted() ? "Completed" : "Planning"
        ));

        table.getColumns().addAll(idCol, destCol, dateCol, budgetCol, statusCol);
        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        table.setRowFactory(tv -> new TableRow<>() {
            @Override
            protected void updateItem(Trip trip, boolean empty) {
                super.updateItem(trip, empty);
                if (trip == null || empty) {
                    setStyle("");
                } else if (trip.isCompleted()) {
                    setStyle("-fx-background-color: #d0f0c0;");
                } else if (getIndex() % 2 == 0) {
                    setStyle("-fx-background-color: #f0f8ff;");
                } else {
                    setStyle("-fx-background-color: #ffffff;");
                }
            }
        });

        //Input Fields
        TextField destField = new TextField();
        destField.setPromptText("Destination");

        DatePicker startDatePicker = new DatePicker();
        DatePicker endDatePicker = new DatePicker();

        TextField budgetField = new TextField();
        budgetField.setPromptText("Budget");

        TextField notesField = new TextField();
        notesField.setPromptText("Notes");

        Button addBtn = createStyledButton("Add Trip");
        Button updateBtn = createStyledButton("Update Trip");
        Button deleteBtn = createStyledButton("Delete Trip");
        Button markBtn = createStyledButton("Toggle Complete");
        Button exportBtn = createStyledButton("Export Trips");

        //Search
        TextField searchField = new TextField();
        searchField.setPromptText("Search by Destination or ID...");
        Button clearSearchBtn = createStyledButton("Clear");
        HBox searchArea = new HBox(10, new Label("Search:"), searchField, clearSearchBtn);
        searchArea.setPadding(new Insets(10));
        searchArea.setAlignment(Pos.CENTER_LEFT);

        FilteredList<Trip> filteredData = new FilteredList<>(tripList, p -> true);
        table.setItems(filteredData);

        searchField.textProperty().addListener((obs, oldVal, newVal) -> {
            String filter = newVal.toLowerCase().trim();
            filteredData.setPredicate(trip -> {
                if (filter.isEmpty()) return true;
                return trip.getDestination().toLowerCase().contains(filter)
                        || String.valueOf(trip.getId()).contains(filter);
            });
        });

        clearSearchBtn.setOnAction(e -> {
            searchField.clear();
            filteredData.setPredicate(p -> true);
        });

        HBox inputBox = new HBox(10, destField, startDatePicker, endDatePicker, budgetField, notesField, addBtn);
        inputBox.setPadding(new Insets(10));
        inputBox.setAlignment(Pos.CENTER_LEFT);

        HBox buttonBox = new HBox(10, updateBtn, deleteBtn, markBtn, exportBtn);
        buttonBox.setPadding(new Insets(10));
        buttonBox.setAlignment(Pos.CENTER_LEFT);

        //Event Handlers
        addBtn.setOnAction(e -> {
            try {
                String dest = destField.getText().trim();
                LocalDate start = startDatePicker.getValue();
                LocalDate end = endDatePicker.getValue();
                double budget = Double.parseDouble(budgetField.getText().trim());
                String notes = notesField.getText().trim();

                if (dest.isEmpty() || start == null || end == null) {
                    showAlert("Error", "Please fill out all required fields.");
                    return;
                }

                Trip trip = tripService.createTrip(dest, start, end, budget, notes);
                tripList.add(trip);
                clearFields(destField, startDatePicker, endDatePicker, budgetField, notesField);
            } catch (Exception ex) {
                showAlert("Error", "Failed to add trip: " + ex.getMessage());
            }
        });

        deleteBtn.setOnAction(e -> {
            Trip selected = table.getSelectionModel().getSelectedItem();
            if (selected != null) {
                try {
                    tripService.deleteTrip(selected.getId());
                    tripList.remove(selected);
                } catch (SQLException ex) {
                    showAlert("Error", "Failed to delete trip.");
                }
            } else {
                showAlert("Warning", "Select a trip to delete.");
            }
        });

        markBtn.setOnAction(e -> {
            Trip selected = table.getSelectionModel().getSelectedItem();
            if (selected != null) {
                try {
                    selected.setCompleted(!selected.isCompleted());
                    tripService.updateTrip(selected);
                    table.refresh();
                } catch (SQLException ex) {
                    showAlert("Error", "Failed to update trip.");
                }
            }
        });

        exportBtn.setOnAction(e -> {
            FileChooser exportChooser = new FileChooser();
            exportChooser.setTitle("Export Database File");
            exportChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("SQLite Database (*.db)", "*.db"));
            File exportFile = exportChooser.showSaveDialog(stage);
            if (exportFile != null) {
                try {
                    // Copy the current DB file to the chosen location
                    File currentDb = new File(tripService.getDbPath());
                    try (var in = new java.io.FileInputStream(currentDb);
                         var out = new java.io.FileOutputStream(exportFile)) {
                        in.transferTo(out);
                    }
                    showAlert("Success", "Database exported successfully to:\n" + exportFile.getAbsolutePath());
                } catch (IOException ex) {
                    showAlert("Error", "Failed to export database: " + ex.getMessage());
                }
            }


    });

        //Load trips
        try {
            tripList.addAll(tripService.getAllTrips());
        } catch (SQLException e) {
            showAlert("Error", "Failed to load trips from database.");
        }

        VBox layout = new VBox(10, headerBox, inputBox, buttonBox, searchArea, table);
        layout.setPadding(new Insets(15));
        layout.setStyle("-fx-background-color: #e6f2ff;");

        stage.setScene(new Scene(layout, 1000, 650));
        stage.show();
    }

    private Button createStyledButton(String text) {
        Button btn = new Button(text);
        btn.setStyle("-fx-background-color: #4682b4; -fx-text-fill: white; -fx-font-weight: bold;");
        btn.setOnMouseEntered(e -> btn.setStyle("-fx-background-color: #5a9bd4; -fx-text-fill: white; -fx-font-weight: bold;"));
        btn.setOnMouseExited(e -> btn.setStyle("-fx-background-color: #4682b4; -fx-text-fill: white; -fx-font-weight: bold;"));
        return btn;
    }

    private void clearFields(TextField destField, DatePicker start, DatePicker end, TextField budget, TextField notes) {
        destField.clear();
        start.setValue(null);
        end.setValue(null);
        budget.clear();
        notes.clear();
    }

    private void showAlert(String title, String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setContentText(msg);
        alert.showAndWait();
    }
}
